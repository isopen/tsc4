{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=371; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}

() recv_internal() {
}

;; testable
(tuple) fibonacci_sequence (int n, int k) method_id {
  if (n < 0) {
    return empty_tuple();
  }
  elseif (k < 0) {
    return empty_tuple();
  }
  elseif (n + k > 371) {
    return empty_tuple();
  }
  elseif (n > 371) {
    return empty_tuple();
  }
  elseif (k > 255) {
    return empty_tuple();
  }

  tuple fib = empty_tuple();
  int f0 = 0;
  int f1 = 1;
  int lock = 1;
  int i = 0;
  while (i < n + k) {
    if (i == 368) {
      lock = 0;
    }
    elseif (i == 369) {
      lock = 0;
    }
    elseif (i == 370) {
      lock = 0;
    }
    elseif (i == 371) {
      lock = 0;
    }
    if (i >= n) {
      if (i == 368) {
        fib~tpush(3613820771726588532844151983686312328669591587077302105005886240656274960);
      }
      elseif (i == 369) {
        fib~tpush(5847284837903995268485385173690113323974126689145684455726175591403906364);
      }
      elseif (i == 370) {
        fib~tpush(9461105609630583801329537157376425652643718276222986560732061832060181325);
      }
      elseif (i == 371) {
        fib~tpush(15308390447534579069814922331066538976617844965368671016458237423464087690);
      }
      else {
        fib~tpush(f0);
      }
    }
    if (lock) {
      int temp = f0 + f1;
      f0 = f1;
      f1 = temp;
    }
    i += 1;
  }

  return fib;
}

