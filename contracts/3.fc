{- 
  TASK 3 - Find and replace binary substring
  Binary string is represented as a cell linked list: string splitted to chunks,
  first chunk stored to the root cell, next one to the cell in ref and so on;
  each cell can have only one ref. 
  Write the method that find and replaces one flags in the binary string
  with another value. Flags and values can be can be of any length, but
  strictly up to 128 bits. The method must replace every flag it finds.
  Flag and the value to be replaced is guaranteed to be greater than 0.
  Lets give a simple example. We have the target flag 101110101 and the value
  to be written 111111111 as inputs, and a linked list of cells, in which the bit
  value of the first cell ends with ...10100001011, and in the ref we have cell that
  starts with 10101000111111...
  The output should be a linked list where the first
  cell ends with ...10100001111, and the second cell starts with 11111000111111...

-}

(int) tlen (tuple t) asm "TLEN";
forall X -> (tuple, X) ~tpop (tuple t) asm "TPOP";
forall X -> slice cast_to_slice (X x) asm "NOP";
forall X -> slice cast_to_int (X x) asm "NOP";
forall X -> tuple cast_to_tuple (X x) asm "NOP";
forall X -> (tuple, X) list_next(tuple list) asm( -> 1 0) "UNCONS";
forall X -> int is_null (X x) asm "ISNULL";
forall X -> (tuple, ()) push_back (tuple tail, X head) asm "CONS";
forall X -> (tuple, (X)) pop_back (tuple t) asm "UNCONS";
(slice, cell) load_ref(slice s) asm( -> 1 0) "LDREF";
forall X -> int is_tuple (X x) asm "ISTUPLE";
builder store_ref(builder b, cell c) asm(c b) "STREF";

() recv_internal() {
}

(int) string_to_int(slice string_number) {
    int number = 0;

    while (~ string_number.slice_empty?()) {
        int char = string_number~load_uint(8);
        number = (number * 10) + (char - 48);
    }

    return number;
}

(slice) int_to_string(int n) {
    builder string = begin_cell();
    tuple chars = null();
    do {
        int r = n~divmod(10);
        chars = cons(r + 48, chars);
    } until (n == 0);
    do {
        int char = chars~list_next();
        string~store_uint(char, 8);
    } until (null?(chars));

    slice result = string.end_cell().begin_parse();

    return result;
}

(int) slen(slice s) {
    return slice_bits(s) / 8;
}

(slice) add_slice(slice s, slice s1) {
  cell cs = begin_cell()
              .store_slice(s)
			        .store_slice(s1)
		        .end_cell();

	return cs.begin_parse();
}

(slice) get_substring(slice string_number, int i, int k) {
  int len = slen(string_number);
  int j = len - k;

  if (j >= i) & (i <= len) {
    builder string = begin_cell();

    int t = 1;
    while (~ string_number.slice_empty?()) {
      int char = string_number~load_uint(8);
      if (t >= i) & (t <= i + k) {
        string~store_uint(char, 8);
      }
      t += 1;
    }

    slice result = string.end_cell().begin_parse();

    return result;
  }
  else {
    return null();
  }
}

(slice) get_endstring(slice string_number, int i) {
  builder string = begin_cell();

  int t = 1;
  while (~ string_number.slice_empty?()) {
    int char = string_number~load_uint(8);
    if (t >= i) {
      string~store_uint(char, 8);
    }
    t += 1;
  }

  slice result = string.end_cell().begin_parse();

  return result;
}

(int) is_equalstring(slice s, slice s1) {
  while (~ s.slice_empty?()) {
    int char = s~load_uint(8);
    int char1 = s1~load_uint(8);
    if (char != char1) {
      return 0;
    }
  }

  return 1;
}

(slice) replace_all(slice s, slice f, slice v) {
  int lf = slen(f);
  int ls = slen(s);
  slice r = get_substring(s, 0, lf);
  int i = lf + 1;
  if (is_equalstring(r, f)) {
    r = v;
  }
  else {
    r = get_substring(s, 1, 0);
    i = 2;
  }

  int lock = 1;
  while (lock) {
    slice tmp = get_substring(s, i, lf - 1);
    if (tmp.is_null()) {
      r = add_slice(r, get_endstring(s, i));
      lock = 0;
    } else {
      if (is_equalstring(tmp, f)) {
        r = add_slice(r, v);
        i += lf;
      }
      else {
        r = add_slice(r, get_substring(s, i, 0));
        i += 1;
      }
    }
  }

  return r;
}

(int) math::pow(int n, int e) {
  if (e == 0) {
    return 1;
  }

  if (e == 1) {
    return n;
  }

  int p = math::pow(n, (e / 2));
  p = p * p;
    
  if ((e % 2) == 1) {
    p = p * n;
  }
    
  return p;
}

(slice) dec2bin(int dn) {
  slice bn = "";
  while (dn > 0) {
    int r = dn % 2;
    bn = add_slice(int_to_string(r), bn);
    dn /= 2;
  }

  return bn;
}

(int) bin2dec(slice bs) {
    int dn = 0;
    int power = 0;

    int i = slen(bs);
    while (i >= 1) {
      if (is_equalstring(get_substring(bs, i, 0), "1")) {
         dn += math::pow(2, power);
      }
      power += 1;
      i -= 1;
    }

    return dn;
}

(tuple) reverse_tuple(tuple t1) {
    tuple t2 = empty_tuple();
    repeat (t1.tlen()) {
        var value = t1~tpop();
        t2~tpush(value);
    }
    return t2;
}

(cell) find_and_replace(int flag, int value, cell linked_list) method_id {
  ;; int flag = 373;
  ;; int value = 511;

  slice fl = dec2bin(flag);
  slice val = dec2bin(value);

  if (slen(fl) > 128) | (slen(val) > 128) {
    return begin_cell().end_cell();
  }

  ;; 1011101011011101011200444200555300
  {-cell linked_list = begin_cell()
        .store_uint(101110101101110101101110101101110101, 81)
        .store_ref(begin_cell()
            .store_uint(1011, 80)
            .store_ref(begin_cell()
              .store_uint(101011200444200, 82)
              .store_ref(begin_cell()
                .store_uint(555300, 83)
                  .store_ref(begin_cell()
                    .store_uint(555300, 83)
                    .store_ref(begin_cell()
                      .store_uint(555300, 83)
                      .store_ref(begin_cell()
                        .store_uint(101110101101110101101110101101110101, 128)
                      .end_cell())
                    .end_cell())
                  .end_cell())
              .end_cell())
            .end_cell())
        .end_cell())
    .end_cell();-}
  {-cell linked_list = begin_cell()
        .store_uint(1291, 11)
        .store_ref(begin_cell()
            .store_uint(10815, 14)
            .end_cell())
        .end_cell();-}
        
  tuple stack = null();
  stack~push_back(linked_list);

  tuple lens = empty_tuple();
  tuple bits = empty_tuple();
  slice res = "";

  while (~ stack.is_null()) {
    cell cs = stack~pop_back();
    slice s = cs.begin_parse();

    repeat (s.slice_refs()) {
      stack~push_back(s~load_ref());
    }

    int c_l = 0;
    int lock = 1;
    while (lock) {
      if (s.slice_empty?()) {
        lock = 0;
      } else {
        ;;int b = slice_bits(s);
        slice cell_value = dec2bin(s~load_uint(slice_bits(s)));
        lens~tpush(slen(cell_value));
        ;;bits~tpush(b);
        res = add_slice(res, cell_value);
      }
    }
  }

  ;; bin
  res = replace_all(res, fl, val);
  ;;return res;

  builder result_list = begin_cell();

  lens = reverse_tuple(lens);
  ;;bits = reverse_tuple(bits);

  int l = lens.at(0); ;; 14
  ;;return l;
  ;;int b = bits.at(0);

  int lll = slen(res);

  slice s = get_substring(res, (lll - l) + 1, l - 1);
  result_list = result_list.store_uint(bin2dec(s), slen(s));
  ;;return lll; ;; lll = 25, l = 14 25 - 14 = 11 -> 13
  ;;return bin2dec(s);

  int i = 1;
  cell c_r = null();
  int tmp = 0;
  repeat (lens.tlen() - 1) {
    tmp = l;
    l += lens.at(i);
    s = get_substring(res, lll - l, lens.at(i));

    if (c_r.is_null()) {
      c_r = result_list.end_cell();

      c_r = begin_cell()
                .store_uint(bin2dec(s), slen(s))
                .store_ref(c_r)
              .end_cell();
    }
    else {
      c_r = begin_cell()
              .store_uint(bin2dec(s), slen(s))
              .store_ref(c_r)
            .end_cell();
    }

    i += 1;
  }

  ;;slice kk = c_r.begin_parse();

  ;;cell t = kk~load_ref();

  ;;slice kk1 = t.begin_parse();

  {-
  lens
  items: [
        { type: 'int', value: 6n },
        { type: 'int', value: 15n },
        { type: 'int', value: 4n },
        { type: 'int', value: 9n }
      ]
  bits
  items: [
        { type: 'int', value: 83n },
        { type: 'int', value: 82n },
        { type: 'int', value: 80n },
        { type: 'int', value: 81n }
      ]
  -}

  return c_r;
}

