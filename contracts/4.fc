{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  slice string = text.begin_parse();
  string.load_uint(32);

  builder result = begin_cell();
  while (~ slice_data_empty?(string)) {
    int ch = string~load_uint(8);
    if (ch >= 65) & (ch <= 90) {
        int encrypted_ch = ((ch - 65 + shift) % 26) + 65;
        result = result.store_uint(encrypted_ch, 8);
    }
    elseif (ch >= 97) & (ch <= 122) {
        int encrypted_ch = ((ch - 97 + shift) % 26) + 97;
        result = result.store_uint(encrypted_ch, 8);
    } else {
        result = result.store_uint(ch, 8);
    }
  }
  if (string.slice_refs()) {
    return result.store_ref(caesar_cipher_encrypt(shift, string~load_ref())).end_cell();
  }
  return result.end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  slice string = text.begin_parse();
  string.load_uint(32);

  builder result = begin_cell();
  while (~ slice_data_empty?(string)) {
    int ch = string~load_uint(8);
    if (ch >= 65) & (ch <= 90) {
        int decrypted_ch = ((ch - 65 - shift + 26) % 26) + 65;
        result = result.store_uint(decrypted_ch, 8);
    }
    elseif (ch >= 97) & (ch <= 122) {
        int decrypted_ch = ((ch - 97 - shift + 26) % 26) + 97;
        result = result.store_uint(decrypted_ch, 8);
    } else {
        result = result.store_uint(ch, 8);
    }
  }
  if (string.slice_refs()) {
    return result.store_ref(caesar_cipher_decrypt(shift, string~load_ref())).end_cell();
  }
  return result.end_cell();
}
